#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <climits>
#include <string>
using namespace std;

// Node structure for SSTF
struct Node {
    int distance = 0; // represents difference between head position and track number
    bool accessed = false; // true if track has been accessed
};

// Print the seek sequence
void printSeekSequence(const vector<int>& sequence) {
    cout << "Seek Sequence is:" << endl;
    for (int i = 0; i < sequence.size(); ++i) {
        cout << sequence[i];
        if (i < sequence.size() - 1)
            cout << " --> ";
    }
    cout << endl << endl;
}

// First-Come First-Served (FCFS) Disk Scheduling Algorithm
void FCFS(const vector<int>& arr, int head) {
    int seek_count = 0;
    vector<int> seek_sequence;
    for (int track : arr) {
        seek_count += abs(track - head);
        seek_sequence.push_back(track);
        head = track;
    }
    cout << "Total number of seek operations = " << seek_count << endl;
    printSeekSequence(seek_sequence);
}

// Shortest Seek Time First (SSTF) Disk Scheduling Algorithm
void shortestSeekTimeFirst(const vector<int>& request, int head) {
    if (request.empty())
        return;
    vector<Node> diff(request.size());
    int seek_count = 0;
    vector<int> seek_sequence(request.size() + 1);
    for (int i = 0; i < request.size(); i++) {
        seek_sequence[i] = head;
        for (int j = 0; j < request.size(); j++)
            diff[j].distance = abs(request[j] - head);
        int index = -1, minimum = INT_MAX;
        for (int j = 0; j < diff.size(); j++) {
            if (!diff[j].accessed && minimum > diff[j].distance) {
                minimum = diff[j].distance;
                index = j;
            }
        }
        diff[index].accessed = true;
        seek_count += diff[index].distance;
        head = request[index];
    }
    seek_sequence[seek_sequence.size() - 1] = head;
    cout << "Total number of seek operations = " << seek_count << endl;
    printSeekSequence(seek_sequence);
}

// SCAN Disk Scheduling Algorithm
void SCANDisk(const vector<int>& arr, int head, string direction) {
    int seek_count = 0;
    vector<int> left, right, seek_sequence;
    if (direction == "left")
        left.push_back(0);
    else if (direction == "right")
        right.push_back(199);
    for (int track : arr) {
        if (track < head)
            left.push_back(track);
        if (track > head)
            right.push_back(track);
    }
    sort(left.begin(), left.end());
    sort(right.begin(), right.end());
    int run = 2;
    while (run-- > 0) {
        if (direction == "left") {
            for (int i = left.size() - 1; i >= 0; i--) {
                seek_sequence.push_back(left[i]);
                seek_count += abs(left[i] - head);
                head = left[i];
            }
            direction = "right";
        } else if (direction == "right") {
            for (int track : right) {
                seek_sequence.push_back(track);
                seek_count += abs(track - head);
                head = track;
            }
            direction = "left";
        }
    }
    cout << "Total number of seek operations = " << seek_count << endl;
    printSeekSequence(seek_sequence);
}

// Circular SCAN (C-SCAN) Disk Scheduling Algorithm
void CSCAN(const vector<int>& arr, int head) {
    int seek_count = 0;
    vector<int> left, right, seek_sequence;
    left.push_back(0);
    right.push_back(199);
    for (int track : arr) {
        if (track < head)
            left.push_back(track);
        if (track > head)
            right.push_back(track);
    }
    sort(left.begin(), left.end());
    sort(right.begin(), right.end());
    for (int track : right) {
        seek_sequence.push_back(track);
        seek_count += abs(track - head);
        head = track;
    }
    head = 0;
    seek_count += 199;
    for (int track : left) {
        seek_sequence.push_back(track);
        seek_count += abs(track - head);
        head = track;
    }
    cout << "Total number of seek operations = " << seek_count << endl;
    printSeekSequence(seek_sequence);
}

// Main function
int main() {
    vector<int> arr;
    int track, head;
    string direction;
    cout << "Enter disk requests (enter -1 to finish): ";
    while (cin >> track && track != -1)
        arr.push_back(track);
    cout << "Enter initial head position: ";
    cin >> head;
    cout << "Enter direction for SCAN algorithm (left/right): ";
    cin >> direction;

    cout << "FCFS Algorithm" << endl;
    FCFS(arr, head);
    cout << "SSTF Algorithm" << endl;
    shortestSeekTimeFirst(arr, head);
    cout << "SCAN Algorithm" << endl;
    SCANDisk(arr, head, direction);
    cout << "C-SCAN Algorithm" << endl;
    CSCAN(arr, head);

    return 0;
}
