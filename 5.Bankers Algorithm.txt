#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX_PROCESSES = 10;
const int MAX_RESOURCES = 10;

int main() {
    int processes, resources, i, j, Allocation[MAX_PROCESSES][MAX_RESOURCES], Max[MAX_PROCESSES][MAX_RESOURCES], Available[MAX_RESOURCES], need[MAX_PROCESSES][MAX_RESOURCES], resource_cnt, completed, k;
    
    cout << "Enter number of processes: ";
    cin >> processes;
    
    cout << "Enter number of resources: ";
    cin >> resources;
    
    cout << "\nEnter Allocation Matrix:\n";
    for (i = 0; i < processes; i++) {
        cout << "Enter allocation for process " << i << ": ";
        for (j = 0; j < resources; j++) {
            cin >> Allocation[i][j];
        }
    }
    
    cout << "\nEnter Maximum Matrix:\n";
    for (i = 0; i < processes; i++) {
        cout << "Enter maximum for process " << i << ": ";
        for (j = 0; j < resources; j++) {
            cin >> Max[i][j];
        }
    }
    
    cout << "\nEnter Available Resources:\n";
    for (i = 0; i < resources; i++) {
        cout << "Available Resource for resource " << i << ": ";
        cin >> Available[i];
    }
    
    // Calculating the need matrix
    for (i = 0; i < processes; i++) {
        for (j = 0; j < resources; j++) {
            need[i][j] = Max[i][j] - Allocation[i][j];
        }
    }
    
    vector<int> safeSequence;
    safeSequence.reserve(processes);
    completed = 1;
    
    while (completed != 0) {
        completed = 0;
        for (i = 0; i < processes; i++) {
            if (safeSequence.size() == processes) break; // If all processes are in the safe sequence, break
            if (find(safeSequence.begin(), safeSequence.end(), i) != safeSequence.end()) continue; // Skip if process is already in safe sequence
            
            resource_cnt = 0;
            for (j = 0; j < resources; j++) {
                if (need[i][j] <= Available[j]) {
                    resource_cnt++;
                }
            }
            
            if (resource_cnt == resources) {
                for (k = 0; k < resources; k++) {
                    Available[k] += Allocation[i][k];
                }
                safeSequence.push_back(i);
                completed = 1;
            }
        }
    }
    
    cout << "\nSafe Sequence -> ";
    for (i = 0; i < safeSequence.size(); i++) {
        cout << "P" << safeSequence[i];
        if (i != safeSequence.size() - 1) {
            cout << " --> ";
        }
    }
    cout << endl;
    
    return 0;
}
